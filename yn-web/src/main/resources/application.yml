
server:
  port: 8081
  context-path: /
#spring
spring:
  devtools:
    restart:
      enabled: false
  servlet:
    multipart:
      enabled: true
      max-file-size: 5242880
  profiles:
    active:
    #cache:
    #type: guava
  #resources:
  #  static-locations: classthpath:/static/,classpath:/templates/
  #mvc:
  #  static-path-pattern: /static/**
  #  view:
  #    prefix: classpath:/templates/
  #    #suffix: .html
  #    mode: HTML5
  #    encoding: UTF-8
  #    cache: false
  #    content-type: text/html # ;charset=<encoding> is added
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML5
    encoding: UTF-8
    cache: false
    #content-type: text/html # ;charset=<encoding> is added
    servlet:
      content-type: text/html # ;charset=<encoding> is added
  #beetl:
  #  delimiter-statement-start: \@   #开始结束标签(yaml不允许@开头)
  #  delimiter-statement-end: null
  #  resource-auto-check: true #是票？否检测文件变化,开发用true合适，但线上要改为false
  # druid DATABASE CONFIG
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    #schema: classpath:/db/schema-h2.sql
    #data: classpath:/db/data-h2.sql
    url: jdbc:mysql://localhost:3306/com_yn?characterEncoding=UTF-8&serverTimezone=UTC
    username: root
    password: yannuo
#    driverClassName: com.mysql.jdbc.Driver
    driverClassName: com.mysql.cj.jdbc.Driver
    # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
    initialSize: 1
    # 最小连接池数量
    minIdle: 5
    # 最大连接池数量
    maxActive: 50
    # 配置获取连接等待超时的时间
    maxWait: 6000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 30000
    # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
    validationQuery: select 1
    # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    testWhileIdle: true
    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    testOnBorrow: false
    # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    #poolPreparedStatements: true
    # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
    filters: stat,wall

  #redis
  redis:
    database: 1
    host: 192.168.187.130
    port: 6379
    password: yannuo1996
  #spring-session
  session:
    store-type: redis
    #initialize: true
    #continue-on-error: true

#mybatis
mybatis-plus:
  mapper-locations: classpath:/com.yn.domain.mapper/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.yn.domain.model.po
  typeEnumsPackage:
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 2
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    #序列接口实现类配置,不在推荐使用此方式进行配置,请使用自定义bean注入
    #key-generator: com.baomidou.mybatisplus.incrementer.H2KeyGenerator
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 0
    logic-not-delete-value: 1
    #自定义sql注入器,不在推荐使用此方式进行配置,请使用自定义bean注入
    #sql-injector: com.baomidou.mybatisplus.com.yn.domain.mapper.LogicSqlInjector
    #自定义填充策略接口实现,不在推荐使用此方式进行配置,请使用自定义bean注入
    #meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler
    #自定义SQL注入器
    #sql-injector: com.baomidou.springboot.xxx
    # SQL 解析缓存，开启后多租户 @SqlParser 注解生效
    #sql-parser-cache: true
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    lazyLoadingEnabled: true
    multipleResultSetsEnabled: true
    useColumnLabel: true
    defaultExecutorType: reuse
    defaultStatementTimeout: 6000
    logImpl: org.apache.ibatis.logging.stdout.StdOutImpl
    mapUnderscoreToCamelCase: true
    cacheEnabled: false

logging:
  level:
    com.fastarrow.betterstore: info
---
#test environment
server:
  port: 8080
spring:
  profiles: test
  datasource:
    url: jdbc:mysql://localhost:3306/com_yn?characterEncoding=UTF-8
    username: root
    password: yannuo